trigger:
 - master
 - master-next
 - zeus

schedules:
- cron: "0 12 * * *"
  displayName: Daily build
  branches:
    include:
    - master
    - zeus
  always: true


jobs:
- job: PixelbookJob
  timeoutInMinutes: 0

  pool:
    vmImage: 'ubuntu-18.04'

  variables:
    SSTATE_MIRRORS_ZEUS: 'file://.* file:///home/vsts/sstate_mirrors/PATH \n file://.* http://sstate.yoctoproject.org/3.0.1/PATH;downloadfilename=PATH'
    SSTATE_MIRRORS_MASTER: 'file://.* file:///home/vsts/sstate_mirrors/PATH \n file://.* http://sstate.yoctoproject.org/3.1/PATH;downloadfilename=PATH'
    DL_DIR: '/mnt/downloads/'
    SSTATE_DIR: '/home/vsts/downloads/'
    SSTATE_MIRRORS_DIR: '/home/vsts/sstate_mirrors/'
    MACHINE_X86: 'x86-chromebook'
    MACHINE_PXL: 'eve-chromebook'
    KERNEL_YOCTO: 'linux-yocto'
    KERNEL_INTEL: 'linux-intel'
    KERNEL_CHROMIUM: 'linux-chromium'
    DEPLOY_ARTIFACTS_DIR: '/mnt/deploydir/'
    PIPELINE_ID: $(System.DefinitionId)
    BRANCH_TO_BUILD: $(Build.SourceBranchName)
    MACHINE: $(MACHINE_X86)
    KERNEL: $(KERNEL_YOCTO)
    SSTATE_PIPELINE: 18
    SSTATE_PIPELINE_NATIVE: 22

  steps:
  - bash: |
      # Since we'll be upgrading later, we need to remove anything we dont want so we dont upgrade it either
      sudo apt update
      sudo apt purge ghc-\* hhvm zulu-\* google-chrome-stable firefox google-cloud-sdk dotnet\* openjdk-11-jre-headless \
      mono\* php\* aspnetcore\* ubuntu-mono llvm\* moby\* ansible clang\* cabal\* \*\-icon-theme sphinxsearch \
      poppler-data heroku samba\* powershell snapd libclang\* libicu\* liblldb\* vim\* \
      \*doc\* man\* *\apache\* *\node\* \*yarn\* \*iso-codes\* \*kubectl\* \*linux-azure-headers\* \
      \*shellcheck\* \*mercurial-common\* \*cmake\* fonts-dejavu-core* fonts-droid-fallback* \
      fonts-noto-mono* fonts-ubuntu-console* gsfonts*
      # These have to be removed in a different step due to dependency issues
      sudo apt purge libllvm\*
      sudo DEBIAN_FRONTEND=noninteractive apt -yq remove --purge mysql\*
      sudo DEBIAN_FRONTEND=noninteractive apt -yq remove --purge dbconfig-mysql\*
      # Tools to debug space usage
      sudo DEBIAN_FRONTEND=noninteractive apt -yq install durep wajig
      # Remove unneeded dependencies leftover
      sudo apt autoremove --purge
      sudo apt autoclean
      sudo apt clean
      if [ "${DEBUG_PIPE}" == "1" ]; then
        wajig large
        df -h
      fi
    displayName: 'Clean up container packages'


  - bash: |
      # Make sure we still have add-apt-repository
      sudo apt install software-properties-common
      sudo add-apt-repository ppa:ubuntu-toolchain-r/test
      sudo apt update
      sudo apt upgrade
      # Dependencies from the Yocto Quickstart
      until sudo apt install gawk wget git-core diffstat unzip texinfo gcc-multilib \
      build-essential chrpath socat cpio python python3 python3-pip python3-pexpect \
      xz-utils debianutils iputils-ping python3-git python3-jinja2 libegl1-mesa libsdl1.2-dev \
      pylint3 xterm
      do
        echo "Failed updating, trying again..."
        sleep 1
      done
    continueOnError: false
    displayName: 'Upgrading and installing dependencies'


  - bash: |
      until sudo apt install gcc-9 g++-9
      do
        echo "Failed updating, trying again..."
        sleep 1
      done
      sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 90 --slave /usr/bin/g++ g++ /usr/bin/g++-9 --slave /usr/bin/gcov gcov /usr/bin/gcov-9
    displayName: 'Installing Newer GCC'

  - bash: |
      if [ "${DEBUG_PIPE}" == "1" ]; then
        echo "Free space before"
        df -h
      fi
      sudo apt autoremove --purge
      sudo apt autoclean
      sudo apt clean
      sudo apt-get clean
      sudo apt-get autoclean
      if [ "${DEBUG_PIPE}" == "1" ]; then
        echo "Free space after"
        df -h
      fi
    displayName: 'Clean up leftover dependencies'

  - bash: |
      if [ "${DEBUG_PIPE}" == "1" ]; then
            echo "Debug variables:"
            echo Build.SourceBranch $(Build.SourceBranch)
            echo Build.SourceBranchName $(Build.SourceBranchName)
            echo System.PullRequest.SourceBranch $(System.PullRequest.SourceBranch)
            echo System.PullRequest.TargetBranch $(System.PullRequest.TargetBranch)
            echo "Free space before"
            df -h
            echo "Freeing up disk space"
      fi
      # There are a lot of tools that we dont need inside the container
      export TOFREE="/usr/share/dotnet /usr/share/rust /usr/local/go* /usr/lib/jvm \
      /usr/local/lib/android/  /usr/lib/google-cloud-sdk /opt/* /var/cache/apt/ /var/lib/apt/lists \
      /usr/lib/firefox /usr/share/gradle* /usr/share/miniconda/ \
      /usr/share/icons/ /usr/share/man /usr/share/docs \
      /usr/lib/mono /usr/lib/monodoc /usr/lib/php* /usr/lib/heroku /usr/lib/cgi-bin \
      /usr/share/apache-maven-3.6.2/ \
      /home/vsts/agents/*.tgz /home/vsts/agents/2.150.3/ \
      /home/vsts/agents/2.162.0/ /home/vsts/agents/2.160.1/ /home/vsts/agents/2.152.1/ /home/vsts/agents/2.152.0/ \
      /usr/share/az_2.3* /usr/share/az_1* \
      /usr/local/n/ /usr/local/lib/node* /usr/local/share/ /usr/local/bin/ \
      /usr/libx32/gconv /usr/lib32/gconv \
      "
      # This cant be done in parallel
      for i in ${TOFREE};do sudo rm -rf $i; done;
      # Create a smaller swapfile to save space
      sudo swapoff /swapfile
      sudo rm -rf /swapfile
      sudo fallocate -l 4G /swapfile
      sudo chmod 600 /swapfile
      sudo mkswap /swapfile
      sudo swapon /swapfile
      if [ "${DEBUG_PIPE}" == "1" ]; then
            df -h
            du -Sh / 2>/dev/null | sort -rh | head -n 200
            du -akS -d 4  / 2>/dev/null | sort -n -r | head -n 50
            durep -td 3
            echo "Creating downloads and sstate directories"
      fi
      sudo mkdir $(DL_DIR)
      sudo mkdir $(SSTATE_DIR)
      sudo mkdir $(SSTATE_MIRRORS_DIR)
      sudo mkdir $(DEPLOY_ARTIFACTS_DIR)
      sudo chown vsts:vsts $(SSTATE_DIR)
      sudo chown vsts:vsts $(DL_DIR)
      sudo chown vsts:vsts $(SSTATE_MIRRORS_DIR)
      sudo chown vsts:vsts ${DEPLOY_ARTIFACTS_DIR}
    displayName: 'Purge container'

  - bash: |
      cd ~/
      echo "Cloning Yocto Project"
      PULLREQBRANCH=$(System.PullRequest.TargetBranch)
      if [ -z "$PULLREQBRANCH" ]; then
        if [ "$(Build.SourceBranchName)" == "zeus" ]; then
          YPBRANCH=$(Build.SourceBranchName);
        else
          YPBRANCH="master";
        fi
      else
        YPBRANCH=$PULLREQBRANCH;
      fi
      echo "Building Yocto branch: $YPBRANCH"
      git clone git://git.yoctoproject.org/poky -b $YPBRANCH
      cd poky
      git clone https://git.yoctoproject.org/git/meta-intel -b $YPBRANCH
      git clone git://git.openembedded.org/meta-openembedded -b $YPBRANCH
    continueOnError: false
    displayName: 'Cloning Repositories'

  - bash: |
      # Add layers and create local.conf
      echo "Creating proper bblayers.conf"
      cd ~/poky
      source oe-init-build-env
      if [ "${BRANCH_TO_BUILD}" == "zeus" ]; then
          echo "SSTATE_MIRRORS = \"${SSTATE_MIRRORS_ZEUS}\"" >> ./conf/local.conf
      else
          echo "SSTATE_MIRRORS = \"${SSTATE_MIRRORS_MASTER}\"" >> ./conf/local.conf
      fi
      echo "SSTATE_DIR = \"${SSTATE_DIR}\"" >> ./conf/local.conf
      echo "DL_DIR = \"${DL_DIR}\"" >> ./conf/local.conf
      bitbake-layers add-layer ../meta-intel
      bitbake-layers add-layer ../meta-openembedded/meta-oe
      bitbake-layers add-layer ../meta-openembedded/meta-python
      bitbake-layers add-layer ../meta-openembedded/meta-networking
      bitbake-layers add-layer $(Build.SourcesDirectory)

      if [ "${DEBUG_PIPE}" == "1" ]; then
          echo "bblayers.conf:"
          cat conf/bblayers.conf
      fi
    continueOnError: false
    displayName: 'Create build configuration'

  # At the very least we should start from all native recipes built already
  - task: DownloadPipelineArtifact@2
    inputs:
      source: 'specific'
      project: $(System.TeamProjectId)
      pipeline: $(SSTATE_PIPELINE_NATIVE)
      runVersion: 'latestFromBranch'
      runBranch: $(Build.SourceBranch)
      artifact: 'SState_native'
      targetPath: '$(SSTATE_MIRRORS_DIR)'
      allowFailedBuilds: true
      allowPartiallySucceededBuilds: true
      continueOnError: true
      # e.g.
      # buildVersionToDownload: 'specific'
      # buildId: '549'
      # buildVersionToDownload: 'latestFromBranch'
      # branchName: 'refs/heads/master-next'
      # branchName: $(Build.SourceBranch)
    condition: succeededOrFailed()

  # Latest available Sstate
  - task: DownloadPipelineArtifact@2
    inputs:
      source: 'specific'
      project: $(System.TeamProjectId)
      pipeline: $(SSTATE_PIPELINE)
      runVersion: 'latest'
      artifact: 'SState'
      targetPath: '$(SSTATE_MIRRORS_DIR)'
      allowFailedBuilds: true
      allowPartiallySucceededBuilds: true
      continueOnError: true
    condition: succeededOrFailed()

  - bash: |
      echo "Building minimal chromebook image for ${MACHINE} with kernel ${KERNEL}"
      cd ~/poky
      source oe-init-build-env
      echo "MACHINE = \"${MACHINE}\"" >> ./conf/local.conf
      echo "PREFERRED_PROVIDER_virtual/kernel = \"${KERNEL}\"" >> ./conf/local.conf
      echo "${EXTRA_LOCALCONF}" >> ./conf/local.conf
      echo "Building with the following configuration:"
      tail -n 10 conf/local.conf
      bitbake chromebook-image-minimal
    condition: succeededOrFailed()
    displayName: 'Build minimal chromebook image for $(MACHINE) - $(KERNEL)'

  - bash: |
      df -h
    condition: succeededOrFailed()
    displayName: 'Check space after build'

  - bash: |
      echo "Moving artifacts to be deployed"
      rm -rf ${DEPLOY_ARTIFACTS_DIR}/*
      # Kernel
      mv /home/vsts/poky/build/tmp/deploy/images/${MACHINE}/bzImage--*.bin ${DEPLOY_ARTIFACTS_DIR}
      # QEMUboot
      mv /home/vsts/poky/build/tmp/deploy/images/${MACHINE}/chromebook-image-*-${MACHINE}-*.qemuboot.conf ${DEPLOY_ARTIFACTS_DIR}
      # WIC
      mv /home/vsts/poky/build/tmp/deploy/images/${MACHINE}/chromebook-image-*-${MACHINE}-*.rootfs.wic ${DEPLOY_ARTIFACTS_DIR}
      # Modules
      mv /home/vsts/poky/build/tmp/deploy/images/${MACHINE}/modules--*.tgz ${DEPLOY_ARTIFACTS_DIR}
    condition: succeededOrFailed()
    displayName: 'Moving Artifacts - $(MACHINE) - $(KERNEL)'

  - publish: $(DEPLOY_ARTIFACTS_DIR)
    artifact: $(MACHINE)-$(KERNEL)
    condition: succeededOrFailed()

  - publish: $(SSTATE_DIR)
    artifact: 'SState'
    condition: succeededOrFailed()
