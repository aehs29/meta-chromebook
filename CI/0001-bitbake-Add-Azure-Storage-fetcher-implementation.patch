From b76f2f517d6a7c96b9d04d7ab699edf216a94514 Mon Sep 17 00:00:00 2001
From: Alejandro Enedino Hernandez Samaniego <alhe@linux.microsoft.com>
Date: Thu, 11 Feb 2021 01:21:21 -0700
Subject: [PATCH] bitbake: Add Azure Storage fetcher implementation

Fetch sources using azcopy (assumed to be installed on the host).

This fetcher can easily be used with PREMIRRORS and SSTATE_MIRRORS:

SSTATE_MIRRORS = " file://.* az://<azure-storage-account>.blob.core.windows.net/sstate-cache/PATH;downloadfilename=PATH \n"

PREMIRRORS_prepend = "\
    git://.*/.* az://<azure-storage-account>.blob.core.windows.net/downloads/ \n \
    ftp://.*/.* az://<azure-storage-account>.blob.core.windows.net/downloads/ \n \
    http://.*/.* az://<azure-storage-account>.blob.core.windows.net/downloads/ \n \
    https://.*/.* az://<azure-storage-account>.blob.core.windows.net/downloads/ \n \
"

Can also be used for non-anonymous access via a Shared Access Signature by
declaring the AZ_SAS variable which will be automatically used by the fetcher:

AZ_SAS="?sv=2000-01-01&ss=...&sig=somesignature"

Signed-off-by: Alejandro Enedino Hernandez Samaniego <alhe@linux.microsoft.com>
---
 bitbake/lib/bb/fetch2/__init__.py |  4 +-
 bitbake/lib/bb/fetch2/az.py       | 82 +++++++++++++++++++++++++++++++
 meta/classes/sanity.bbclass       |  2 +-
 3 files changed, 86 insertions(+), 2 deletions(-)
 create mode 100644 bitbake/lib/bb/fetch2/az.py

diff --git a/bitbake/lib/bb/fetch2/__init__.py b/bitbake/lib/bb/fetch2/__init__.py
index 19169d780f..cf0201c490 100644
--- a/bitbake/lib/bb/fetch2/__init__.py
+++ b/bitbake/lib/bb/fetch2/__init__.py
@@ -1243,7 +1243,7 @@ class FetchData(object):
 
             if checksum_name in self.parm:
                 checksum_expected = self.parm[checksum_name]
-            elif self.type not in ["http", "https", "ftp", "ftps", "sftp", "s3"]:
+            elif self.type not in ["http", "https", "ftp", "ftps", "sftp", "s3", "az"]:
                 checksum_expected = None
             else:
                 checksum_expected = d.getVarFlag("SRC_URI", checksum_name)
@@ -1908,6 +1908,7 @@ from . import repo
 from . import clearcase
 from . import npm
 from . import npmsw
+from . import az
 
 methods.append(local.Local())
 methods.append(wget.Wget())
@@ -1927,3 +1928,4 @@ methods.append(repo.Repo())
 methods.append(clearcase.ClearCase())
 methods.append(npm.Npm())
 methods.append(npmsw.NpmShrinkWrap())
+methods.append(az.Az())
diff --git a/bitbake/lib/bb/fetch2/az.py b/bitbake/lib/bb/fetch2/az.py
new file mode 100644
index 0000000000..50179e6a99
--- /dev/null
+++ b/bitbake/lib/bb/fetch2/az.py
@@ -0,0 +1,82 @@
+"""
+BitBake 'Fetch' Azure Storage implementation
+
+"""
+
+# Copyright (C) 2020 Alejandro Hernandez Samaniego
+#
+# Based on bb.fetch2.wget:
+# Copyright (C) 2003, 2004  Chris Larson
+#
+# Based on s3 fetch:
+# Copyright (C) 2017, Andre McCurdy <armccurdy@gmail.com>
+#
+# SPDX-License-Identifier: GPL-2.0-only
+#
+# Based on functions from the base bb module, Copyright 2003 Holger Schurig
+
+import os
+import bb
+import urllib.request, urllib.parse, urllib.error
+from   bb.fetch2 import FetchMethod
+from   bb.fetch2 import FetchError
+from   bb.fetch2 import runfetchcmd
+
+
+class Az(FetchMethod):
+
+    def supports(self, ud, d):
+        """
+        Check to see if a given url can be fetched with Azure
+        """
+        return ud.type in ['az']
+
+    def recommends_checksum(self, urldata):
+        return True
+
+    def urldata_init(self, ud, d):
+        if 'downloadfilename' in ud.parm:
+            ud.basename = ud.parm['downloadfilename']
+        else:
+            ud.basename = os.path.basename(ud.path)
+        ud.localfile = d.expand(urllib.parse.unquote(ud.basename))
+        ud.basecmd = d.getVar("FETCHCMD_az") or "/usr/bin/env azcopy"
+
+    def download(self, ud, d):
+        """
+        Fetch urls
+        """
+
+        # Check if a Shared Access Signature was give and use it
+        az_sas = d.getVar('AZ_SAS')
+
+        # Use https
+        if az_sas:
+            fetchcmd = '%s cp "https://%s%s%s" %s' % (ud.basecmd, ud.host, ud.path, az_sas, ud.localpath)
+        else:
+            fetchcmd = '%s cp "https://%s%s" %s' % (ud.basecmd, ud.host, ud.path, ud.localpath)
+        bb.fetch2.check_network_access(d, fetchcmd, ud.url)
+        runfetchcmd(fetchcmd, d)
+
+        if not os.path.exists(ud.localpath):
+            raise FetchError("The fetch command returned success for url %s but %s doesn't exist?!" % (uri, ud.localpath), uri)
+        if os.path.getsize(ud.localpath) == 0:
+            os.remove(ud.localpath)
+            raise FetchError("The fetch of %s resulted in a zero size file?! Deleting and failing since this isn't right." % (uri), uri)
+
+        return True
+
+    def checkstatus(self, fetch, ud, d):
+        """
+        Check the status of a URL
+        """
+
+        fetchcmd = '%s list https://%s%s' % (ud.basecmd, ud.host, ud.path)
+        bb.fetch2.check_network_access(d, fetchcmd, ud.url)
+        output = runfetchcmd(fetchcmd, d)
+
+        # azcopy list returns 0 when an object wasn't found, need to check the output instead
+        if not output:
+            raise FetchError("The azcopy list command for https://%s%s gave empty output" % (ud.host, ud.path))
+
+        return True
diff --git a/meta/classes/sanity.bbclass b/meta/classes/sanity.bbclass
index 485173ab48..894f0e3107 100644
--- a/meta/classes/sanity.bbclass
+++ b/meta/classes/sanity.bbclass
@@ -895,7 +895,7 @@ def check_sanity_everybuild(status, d):
     mirror_vars = ['MIRRORS', 'PREMIRRORS', 'SSTATE_MIRRORS']
     protocols = ['http', 'ftp', 'file', 'https', \
                  'git', 'gitsm', 'hg', 'osc', 'p4', 'svn', \
-                 'bzr', 'cvs', 'npm', 'sftp', 'ssh', 's3' ]
+                 'bzr', 'cvs', 'npm', 'sftp', 'ssh', 's3', 'az' ]
     for mirror_var in mirror_vars:
         mirrors = (d.getVar(mirror_var) or '').replace('\\n', ' ').split()
 
-- 
2.25.1

