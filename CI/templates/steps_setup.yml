steps:
- bash: |
    if [ ${{ parameters.build_branch }} == "zeus" ]; then
      echo "##vso[task.setvariable variable=buildbranch;]refs/heads/zeus"
      echo "##vso[task.setvariable variable=branchname;]zeus"
    else
      echo "##vso[task.setvariable variable=buildbranch;]refs/heads/master"
      echo "##vso[task.setvariable variable=branchname;]master"
    fi
    if [ ${{ parameters.kernel }} == "yocto" ]; then
      echo "##vso[task.setvariable variable=kernel;]linux-yocto"
    fi
    if [ ${{ parameters.kernel }} == "intel" ]; then
      echo "##vso[task.setvariable variable=kernel;]linux-intel"
    fi
    if [ ${{ parameters.kernel }} == "chromium" ]; then
      echo "##vso[task.setvariable variable=kernel;]linux-chromium"
    fi
    if [ ${{ parameters.machine }} == "eve" ]; then
      echo "##vso[task.setvariable variable=machine;]eve-chromebook"
    fi
    if [ ${{ parameters.machine }} == "x86" ]; then
      echo "##vso[task.setvariable variable=machine;]x86-chromebook"
    fi
    if [ ${{ parameters.machine }} == "skylake" ]; then
      echo "##vso[task.setvariable variable=machine;]intel-skylake-64"
    fi
  displayName: 'Create build configuration'
- bash: |
    # Since we'll be upgrading later, we need to remove anything we dont want so we dont upgrade it either
    sudo DEBIAN_FRONTEND=noninteractive apt update
    sudo DEBIAN_FRONTEND=noninteractive apt purge -yq ghc-\* hhvm zulu-\* google-chrome-stable firefox google-cloud-sdk dotnet\* openjdk-11-jre-headless \
    mono\* php\* aspnetcore\* ubuntu-mono llvm\* moby\* ansible clang\* cabal\* \*\-icon-theme sphinxsearch \
    poppler-data heroku samba\* powershell snapd libclang\* libicu\* liblldb\* vim\* \
    \*doc\* man\* *\apache\* *\node\* \*yarn\* \*iso-codes\* \*kubectl\* \*linux-azure-headers\* \
    \*shellcheck\* \*mercurial-common\* \*cmake\* fonts-dejavu-core* fonts-droid-fallback* \
    fonts-noto-mono* fonts-ubuntu-console* gsfonts* >/dev/null
    # These have to be removed in a different step due to dependency issues
    sudo DEBIAN_FRONTEND=noninteractive apt purge -yq libllvm\* >/dev/null
    sudo DEBIAN_FRONTEND=noninteractive apt -yq remove --purge mysql\* >/dev/null
    sudo DEBIAN_FRONTEND=noninteractive apt -yq remove --purge dbconfig-mysql\* >/dev/null
    # Tools to debug space usage
    sudo DEBIAN_FRONTEND=noninteractive apt -yq install durep wajig >/dev/null
    # Remove unneeded dependencies leftover
    sudo DEBIAN_FRONTEND=noninteractive apt autoremove --purge >/dev/null
    sudo DEBIAN_FRONTEND=noninteractive apt autoclean >/dev/null
    sudo DEBIAN_FRONTEND=noninteractive apt clean >/dev/null
    if [ "${DEBUG_PIPE}" == "1" ]; then
      wajig large
      df -h
    fi
  displayName: 'Clean up container packages'


- bash: |
    # Make sure we still have add-apt-repository
    sudo DEBIAN_FRONTEND=noninteractive apt install software-properties-common
    sudo add-apt-repository ppa:ubuntu-toolchain-r/test
    sudo DEBIAN_FRONTEND=noninteractive apt update
    sudo DEBIAN_FRONTEND=noninteractive apt upgrade
    # Dependencies from the Yocto Quickstart
    until sudo DEBIAN_FRONTEND=noninteractive apt install gawk wget git-core diffstat unzip texinfo gcc-multilib \
    build-essential chrpath socat cpio python python3 python3-pip python3-pexpect \
    xz-utils debianutils iputils-ping python3-git python3-jinja2 libegl1-mesa libsdl1.2-dev \
    pylint3 xterm
    do
      echo "Failed updating, trying again..."
      sleep 1
    done
  continueOnError: false
  displayName: 'Upgrade and install dependencies'

- bash: |
    until sudo DEBIAN_FRONTEND=noninteractive apt install gcc-9 g++-9
    do
      echo "Failed updating, trying again..."
      sleep 1
    done
    sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 90 --slave /usr/bin/g++ g++ /usr/bin/g++-9 --slave /usr/bin/gcov gcov /usr/bin/gcov-9
  displayName: 'Install Newer GCC'

- bash: |
    if [ "${DEBUG_PIPE}" == "1" ]; then
      echo "Free space before"
      df -h
    fi
    sudo DEBIAN_FRONTEND=noninteractive apt autoremove --purge
    sudo DEBIAN_FRONTEND=noninteractive apt autoclean
    sudo DEBIAN_FRONTEND=noninteractive apt clean
    sudo DEBIAN_FRONTEND=noninteractive apt-get clean
    sudo DEBIAN_FRONTEND=noninteractive apt-get autoclean
    if [ "${DEBUG_PIPE}" == "1" ]; then
      echo "Free space after"
      df -h
    fi
  displayName: 'Clean up leftover dependencies'

- bash: |
    if [ "${DEBUG_PIPE}" == "1" ]; then
      echo "Debug variables:"
      echo Build.SourceBranch $(Build.SourceBranch)
      echo Build.SourceBranchName $(Build.SourceBranchName)
      echo "Free space before"
      df -h
      echo "Freeing up disk space"
    fi
    # There are a lot of tools that we dont need inside the container
    export TOFREE="/usr/share/dotnet /usr/share/rust /usr/local/go* /usr/lib/jvm \
    /usr/local/lib/android/  /usr/lib/google-cloud-sdk /opt/* /var/cache/apt/ /var/lib/apt/lists \
    /usr/lib/firefox /usr/share/gradle* /usr/share/miniconda/ \
    /usr/share/icons/ /usr/share/man /usr/share/docs \
    /usr/lib/mono /usr/lib/monodoc /usr/lib/php* /usr/lib/heroku /usr/lib/cgi-bin \
    /usr/share/apache-maven-3.6.2/ \
    /home/vsts/agents/*.tgz /home/vsts/agents/2.150.3/ \
    /home/vsts/agents/2.162.0/ /home/vsts/agents/2.160.1/ /home/vsts/agents/2.152.1/ /home/vsts/agents/2.152.0/ \
    /usr/share/az_2.3* /usr/share/az_1* \
    /usr/local/n/ /usr/local/lib/node* /usr/local/share/ /usr/local/bin/ \
    /usr/libx32/gconv /usr/lib32/gconv \
    "
    # This cant be done in parallel
    for i in ${TOFREE};do sudo rm -rf $i; done;
    # Create a smaller swapfile to save space
    sudo swapoff /swapfile
    sudo rm -rf /swapfile
    sudo fallocate -l 4G /swapfile
    sudo chmod 600 /swapfile
    sudo mkswap /swapfile
    sudo swapon /swapfile
    if [ "${DEBUG_PIPE}" == "1" ]; then
      df -h
      du -Sh / 2>/dev/null | sort -rh | head -n 200
      du -akS -d 4  / 2>/dev/null | sort -n -r | head -n 50
      durep -td 3
      echo "Creating downloads and sstate directories"
    fi
    sudo mkdir $(DL_DIR)
    sudo mkdir $(SSTATE_DIR)
    sudo mkdir $(SSTATE_MIRRORS_DIR)
    sudo mkdir $(DEPLOY_ARTIFACTS_DIR)
    sudo chown vsts:vsts $(SSTATE_DIR)
    sudo chown vsts:vsts $(DL_DIR)
    sudo chown vsts:vsts $(SSTATE_MIRRORS_DIR)
    sudo chown vsts:vsts ${DEPLOY_ARTIFACTS_DIR}
  displayName: 'Purge container'

- bash: |
    cd ~/
    echo "Cloning Yocto Project"
    echo "Building Yocto branch: ${BRANCHNAME}"
    git clone git://git.yoctoproject.org/poky -b ${BRANCHNAME}
    cd poky
    git clone https://git.yoctoproject.org/git/meta-intel -b ${BRANCHNAME}
    git clone git://git.openembedded.org/meta-openembedded -b ${BRANCHNAME}
  continueOnError: false
  displayName: 'Clone Repositories'

- bash: |
    # Add layers and create local.conf
    echo "Creating proper bblayers.conf"
    cd ~/poky
    source oe-init-build-env
    if [ "${BRANCHNAME}" == "zeus" ]; then
      echo "SSTATE_MIRRORS = \"${SSTATE_MIRRORS_ZEUS}\"" >> ./conf/local.conf
    else
      echo "SSTATE_MIRRORS = \"${SSTATE_MIRRORS_MASTER}\"" >> ./conf/local.conf
    fi
    echo "SSTATE_DIR = \"${SSTATE_DIR}\"" >> ./conf/local.conf
    echo "DL_DIR = \"${DL_DIR}\"" >> ./conf/local.conf
    bitbake-layers add-layer ../meta-intel
    bitbake-layers add-layer ../meta-openembedded/meta-oe
    bitbake-layers add-layer ../meta-openembedded/meta-python
    bitbake-layers add-layer ../meta-openembedded/meta-networking
    bitbake-layers add-layer $(Build.SourcesDirectory)

    if [ "${DEBUG_PIPE}" == "1" ]; then
      echo "bblayers.conf:"
      cat conf/bblayers.conf
    fi
  continueOnError: false
  displayName: 'Create bitbake configuration'