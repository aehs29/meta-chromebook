#@TYPE: Machine
#@NAME: eve-chromebook

#@DESCRIPTION: Machine configuration for 64 bit Intel Core i7 CPU (at this point supporting Kaby Lake / Skylake) with all their possible extensions.

# This file is based on meta-intel intel-corei7 MACHINE, but it provides compatibility with newer
# generations of the architecture (they are still at Nehalem).

# Keep the same structure as meta-intel
require conf/machine/include/meta-intel.inc
require conf/machine/include/x86-base.inc
require conf/machine/include/tune-skylake.inc
require conf/machine/include/intel-common-pkgarch.inc

MACHINE_FEATURES += "efi"
MACHINE_FEATURES += "wifi 3g nfc"
MACHINE_FEATURES += "intel-ucode"

MACHINE_FEATURES += "pcbios"
MACHINE_FEATURES += "alsa"

MACHINE_HWCODECS ?= "intel-vaapi-driver gstreamer1.0-vaapi"


XSERVER ?= "${XSERVER_X86_BASE} \
            ${XSERVER_X86_EXT} \
            ${XSERVER_X86_FBDEV} \
            ${XSERVER_X86_I915} \
            ${XSERVER_X86_I965} \
            ${XSERVER_X86_MODESETTING} \
            ${XSERVER_X86_VESA} \
            ${XSERVER_X86_ASPEED_AST} \
           "

SYSLINUX_OPTS = "serial 0 115200"
SERIAL_CONSOLES = "115200;ttyS0 115200;ttyS1 115200;ttyS2"
APPEND += "rootwait console=ttyS0,115200 console=tty0"


IMAGE_FSTYPES += "wic"
# Support only systemd-boot at this point, the chromebooks only allow you to boot in Legacy boot (BIOS) mode anyway.
# WKS_FILE ?= "${@bb.utils.contains_any("EFI_PROVIDER", "systemd-boot", "systemd-bootdisk-microcode.wks.in", "grub-bootdisk-microcode.wks.in", d)}"
# WKS file that supports the legacy boot mode along with EFI
WKS_FILE="systemd-bootdisk-microcode-legacy.wks.in"
WKS_FILE_DEPENDS_append = " intel-microcode"

# Specify the required kernel modules (and firmware) for the specific HW on this MACHINE
# Drivers/Firmware
MACHINE_ESSENTIAL_EXTRA_RRECOMMENDS_append = " kernel-module-i915 linux-firmware-i915 kernel-module-iwlwifi linux-firmware-iwlwifi-7265d kernel-module-iwlmvm linux-firmware-ibt-hw-37-8 kernel-module-cfg80211 kernel-module-mac80211"

# The following can probably go on EXTRA instead of ESSENTIAL, or modify the kernel config if we
# want them built-in and dont want to install them as modules
# Extra modules for Eve
IMAGE_INSTALL_append = " \
kernel-module-ac97-bus \
kernel-module-acpi-thermal-rel \
kernel-module-arc4 \
kernel-module-bnep \
kernel-module-btbcm \
kernel-module-btintel \
kernel-module-btrtl \
kernel-module-btusb \
kernel-module-coretemp \
kernel-module-int3400-thermal \
kernel-module-int3403-thermal \
kernel-module-int340x-thermal-zone \
kernel-module-intel-powerclamp \
kernel-module-intel-rapl \
kernel-module-media \
kernel-module-mei \
kernel-module-mei-me \
kernel-module-processor-thermal-device \ 
kernel-module-rfcomm \
kernel-module-snd-compress \
kernel-module-snd-hda-codec \
kernel-module-snd-hda-codec-hdmi \
kernel-module-snd-hda-core \
kernel-module-snd-hda-ext-core \
kernel-module-snd-hda-intel \
kernel-module-snd-pcm \
kernel-module-snd-soc-acpi \
kernel-module-snd-soc-acpi-intel-match \
kernel-module-snd-soc-core \
kernel-module-snd-soc-max98927 \
kernel-module-snd-soc-rl6231 \
kernel-module-snd-soc-rt5514 \
kernel-module-snd-soc-rt5514-spi \
kernel-module-snd-soc-skl \
kernel-module-snd-soc-skl-ipc \
kernel-module-snd-soc-sst-dsp \
kernel-module-snd-soc-sst-ipc \
kernel-module-snd-timer \
kernel-module-spi-pxa2xx-platform  \
kernel-module-uio \
kernel-module-uvcvideo \
kernel-module-videobuf2-common \
kernel-module-videobuf2-memops \
kernel-module-videobuf2-v4l2 \
kernel-module-videobuf2-vmalloc \
kernel-module-videodev \
kernel-module-x86-pkg-temp-thermal \
kernel-module-ccm \
"



# Needed for QEMU, although at this point -cpu Skylake-{Slient,Server} has some issues
IMAGE_CLASSES += "qemuboot"

QB_SYSTEM_NAME_eve-chromebook = "qemu-system-x86_64"
QB_CPU_eve-chromebook = "-cpu Skylake-Client"
QB_CPU_KVM_eve-chromebook = "-cpu kvm64"

QB_AUDIO_DRV = "alsa"
QB_AUDIO_OPT = "-soundhw ac97,es1370"
QB_KERNEL_CMDLINE_APPEND = "vga=0 uvesafb.mode_option=640x480-32 oprofile.timer=1 uvesafb.task_timeout=-1"
# Add the 'virtio-rng-pci' device otherwise the guest may run out of entropy
QB_OPT_APPEND = "-vga vmware -show-cursor -usb -usbdevice tablet -device virtio-rng-pci"



# Not a huge fan of setting this on a MACHINE.conf, but apparently this is the
# way its wired in, setting it on an image recipe wouldn't work, and otherwise
# it would have to be set on several bbappends.
# This allows us to run Xorg as a non root user
ROOTLESS_X = "1"


# The Skylake tune uses linux-intel as default, comment the following to use it if desired
PREFERRED_PROVIDER_virtual/kernel = "linux-yocto"
PREFERRED_VERSION_linux-yocto  = "5.%"


# qemu-usermode is removed from MACHINE_FEATURES on the tune-skylake.inc file,
# we need to add it back to be able to build all components properly
INHERIT += "qemuuser-enable-chromebook"
